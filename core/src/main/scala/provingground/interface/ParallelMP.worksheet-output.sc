// Modus Ponens proved using parallel generation
import provingground._ , learning._, interface._, translation._, HoTT._, induction._
val A = Type.sym
// A: Typ[Term] = SymbTyp(name = Name(name = "A"), level = 0)
val B = Type.sym
// B: Typ[Term] = SymbTyp(name = Name(name = "B"), level = 0)
val ns = ParMapState.parNodeSeq(TermGenParams())
// ns: TermNodeCoeffSeq[ParMapState] = provingground.learning.TermNodeCoeffSeq$$anon$1@12c2d673
import scala.collection.parallel._, immutable.ParVector
val state0 = ParMapState(ParMap(), ParMap(Type -> 1.0))
// state0: ParMapState = ParMapState(
//   termDist = ParHashMap(),
//   typDist = ParHashMap(𝒰 _0 -> 1.0),
//   vars = Vector(),
//   inds = ParHashMap(),
//   goalDist = ParHashMap(),
//   context = {}
// )
val pde = new ParDistEq(ns.nodeCoeffSeq)
// pde: ParDistEq = provingground.learning.ParDistEq@13b48cc8
val MP = A ~>: (B ~>: (A ->: (A ->: B) ->: B))
// MP: GenFuncTyp[Typ[Term], FuncLike[Typ[Term], Func[Term, Func[Func[Term, Term], Term]]]] = PiDefn(
//   variable = SymbTyp(name = `A, level = 0),
//   value = PiDefn(
//     variable = SymbTyp(name = `B, level = 0),
//     value = FuncTyp(
//       dom = SymbTyp(name = `A, level = 0),
//       codom = FuncTyp(
//         dom = FuncTyp(dom = SymbTyp(name = `A, level = 0), codom = SymbTyp(name = `B, level = 0)),
//         codom = SymbTyp(name = `B, level = 0)
//       )
//     )
//   )
// )
import GeneratorVariables._, Expression._, TermRandomVars._
lazy val (mpts1, mpeq1) = pde.varDist(state0, None, false)(termsWithTyp(MP), math.pow(10, -4))
val pfs1 = mpts1.keys.to(Set)
// pfs1: Set[Term] = Set(
//   LambdaTerm(
//     variable = SymbTyp(name = `@a, level = 0),
//     value = LambdaTerm(
//       variable = SymbTyp(name = `@b, level = 0),
//       value = LambdaFixed(
//         variable = SymbObj(name = ``@a, typ = SymbTyp(name = `@a, level = 0)),
//         value = LambdaFixed(
//           variable = SymbolicFunc(
//             name = ```@a,
//             dom = SymbTyp(name = `@a, level = 0),
//             codom = SymbTyp(name = `@b, level = 0)
//           ),
//           value = SymbObj(
//             name = ApplnSym(
//               func = SymbolicFunc(
//                 name = ```@a,
//                 dom = SymbTyp(name = `@a, level = 0),
//                 codom = SymbTyp(name = `@b, level = 0)
//               ),
//               arg = SymbObj(name = ``@a, typ = SymbTyp(name = `@a, level = 0))
//             ),
//             typ = SymbTyp(name = `@b, level = 0)
//           )
//         )
//       )
//     )
//   )
// )
println(pfs1.head)
// (`@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ ((``@a :  `@a) ↦ ((```@a :  (`@a) → (`@b)) ↦ ((```@a) (``@a)))))
val state1 = ParMapState(ParMap(), ParMap(Type -> 1.0), goalDist = ParMap(MP -> 1.0))
// state1: ParMapState = ParMapState(
//   termDist = ParHashMap(),
//   typDist = ParHashMap(𝒰 _0 -> 1.0),
//   vars = Vector(),
//   inds = ParHashMap(),
//   goalDist = ParHashMap((`A : 𝒰 _0 ) ~> ((`B : 𝒰 _0 ) ~> ((`A) → (((`A) → (`B)) → (`B)))) -> 1.0),
//   context = {}
// )
val pde1  = new ParDistEq(ns.nodeCoeffSeq)
// pde1: ParDistEq = provingground.learning.ParDistEq@542dbfec
val (nextState, eqs) = pde1.nextStateEqs(state1, math.pow(10, -4))
// nextState: ParMapState = ParMapState(
//   termDist = ParMap((((`@a_1) , (`@a_2)) :  ∑((`@a :  𝒰 _0) ↦ (`@a))) ↦ (((`@a_1) , (`@a_2))) -> 0.003870686410957711, (((`@a_1) , (@a_2)) :  ((𝒰 _0) , (𝒰 _0))) ↦ (((`@a_1) , (@a_2))) -> 0.007642124452403685, (`@a :  (`@a : 𝒰 _0 ) ~> (`@a)) ↦ ((`@a) ((`@a) (𝒰 _0))) -> 9.795747375904048E-4, (((`@a_1) , (@a_2)) :  (((𝒰 _0) → (𝒰 _0)) , (𝒰 _0))) ↦ (((`@a_1) , (@a_2))) -> 0.0018221256279583426, (((`@a_1) , (@a_2)) :  (((`@a : 𝒰 _0 ) ~> (`@a)) , (𝒰 _0))) ↦ (((`@a_1) , (@a_2))) -> 7.809109834107181E-4, (`@a :  𝒰 _0) ↦ ((``@a :  `@a) ↦ ((@b :  𝒰 _0) ↦ (``@a))) -> 3.108875866897307E-4, (((`@a_1) , (((@a_2_1) , (@a_2_2)))) :  ((𝒰 _0) , (((𝒰 _0) , (𝒰 _0))))) ↦ (((`@a_1) , (((@a_2_1) , (@a_2_2))))) -> 0.0010751906697104756, (@a :  𝒰 _0) ↦ ((((`@a_1) , (`@a_2)) :  ∑((`@b :  𝒰 _0) ↦ (`@b))) ↦ (((`@a_1) , (`@a_2)))) -> 3.92288479641201E-4, (`@a :  𝒰 _0) ↦ ((((@a_1) , (@a_2)) :  ∑((`@b :  𝒰 _0) ↦ (`@b))) ↦ (`@a)) -> 2.7460193574884074E-4, (`@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ ((``@a :  `@a) ↦ ((```@a :  (`@a) → (`@b)) ↦ ((```@a) (``@a))))) -> 0.13910794589007958, (`@a :  𝒰 _0) ↦ (`@a) -> 0.7535185489617848, (@a :  (𝒰 _0) → (𝒰 _0)) ↦ ((`@a :  𝒰 _0) ↦ (`@a)) -> 0.001551362706591139, (`@a :  𝒰 _0) ↦ ((`@a :  (`@a) → (𝒰 _0)) ↦ (`@a)) -> 3.037097409382178E-4, (`@a :  𝒰 _0) ↦ ((@a :  (𝒰 _0) → (𝒰 _0)) ↦ (`@a)) -> 4.960592435324223E-4, (`@a :  (𝒰 _0) → ((𝒰 _0) → (𝒰 _0))) ↦ (`@a) -> 0.0013999755624729535, (`@a :  (`@a : 𝒰 _0 ) ~> ((`@a) → (𝒰 _0))) ↦ (`@a) -> 8.571278953916042E-4, (`@a :  𝒰 _0) ↦ ((@a :  (`@b : 𝒰 _0 ) ~> (`@b)) ↦ (`@a)) -> 3.037097409382179E-4, (@a :  (`@a : 𝒰 _0 ) ~> (`@a)) ↦ ((`@a :  𝒰 _0) ↦ (`@a)) -> 5.762204338767088E-4, (@a :  𝒰 _0) ↦ ((`@a :  (`@b : 𝒰 _0 ) ~> (`@b)) ↦ (`@a)) -> 4.3387105848316846E-4, (`@a :  (`@a : 𝒰 _0 ) ~> (`@a)) ↦ ((@a :  𝒰 _0) ↦ (`@a)) -> 4.033543037136961E-4, (`@a :  (`@a : 𝒰 _0 ) ~> (`@a)) ↦ (`@a) -> 0.005387661056747228, (((`@a_1) , (@a_2)) :  ((𝒰 _0) , ((𝒰 _0) → (𝒰 _0)))) ↦ (((`@a_1) , (@a_2))) -> 7.375807994213861E-4, (`@a :  𝒰 _0) ↦ ((`@a :  `@a) ↦ ((`@b :  𝒰 _0) ↦ (`@b))) -> 4.441251238424722E-4, (`@a :  𝒰 _0) ↦ ((`@a :  `@a) ↦ ((@b :  𝒰 _0) ↦ (`@a))) -> 2.1762131068281144E-4, (@a :  𝒰 _0) ↦ ((((`@a_1) , (@a_2)) :  ((𝒰 _0) , (𝒰 _0))) ↦ (((`@a_1) , (@a_2)))) -> 6.407378500806282E-4, (((`@a_1) , (@a_2)) :  ((𝒰 _0) , (𝒰 _0))) ↦ ((@a :  𝒰 _0) ↦ (((`@a_1) , (@a_2)))) -> 5.721376595382436E-4, (`@a :  (𝒰 _0) → (((𝒰 _0) , (𝒰 _0)))) ↦ (`@a) -> 0.002040780703313344, (`@a :  𝒰 _0) ↦ ((@b :  𝒰 _0) ↦ ((@c :  𝒰 _0) ↦ (`@a))) -> 5.077830582598936E-4, (@a :  𝒰 _0) ↦ ((@b :  𝒰 _0) ↦ ((`@c :  𝒰 _0) ↦ (`@c))) -> 0.0010362919556324355, (@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ ((@c :  𝒰 _0) ↦ (`@b))) -> 7.254043689427048E-4, (`@a :  (∑((`@a :  𝒰 _0) ↦ (`@a))) → (𝒰 _0)) ↦ (`@a) -> 7.652927637425038E-4, (`@a :  ((`@a : 𝒰 _0 ) ~> (`@a)) → (𝒰 _0)) ↦ (`@a) -> 0.0015305855274850076, (`@a :  ((𝒰 _0) → (𝒰 _0)) → (𝒰 _0)) ↦ (`@a) -> 0.003571366230798351, (`@a :  (((𝒰 _0) , (𝒰 _0))) → (𝒰 _0)) ↦ (`@a) -> 0.0017856831153991756, (`@a :  (𝒰 _0) → (𝒰 _0)) ↦ (`@a) -> 0.02265954583853871, (@a :  𝒰 _0) ↦ ((`@a :  (𝒰 _0) → (𝒰 _0)) ↦ (`@a)) -> 7.086560621891748E-4, (`@a :  𝒰 _0) ↦ ((``@a :  (`@a) → (𝒰 _0)) ↦ (``@a)) -> 4.3387105848316824E-4, (`@a :  (𝒰 _0) → (𝒰 _0)) ↦ ((@a :  𝒰 _0) ↦ (`@a)) -> 0.0010859538946137973, (((((`@a_1_1) , (@a_1_2))) , (@a_2)) :  ((((𝒰 _0) , (𝒰 _0))) , (𝒰 _0))) ↦ (((((`@a_1_1) , (@a_1_2))) , (@a_2))) -> 9.110628139791713E-4, (`@a :  𝒰 _0) ↦ ((``@a :  `@a) ↦ (``@a)) -> 0.003146757127460341, (((@a_1) , (@a_2)) :  ((𝒰 _0) , (𝒰 _0))) ↦ ((`@a :  𝒰 _0) ↦ (`@a)) -> 8.173395136260625E-4, (`@a :  𝒰 _0) ↦ ((((@a_1) , (@a_2)) :  ((𝒰 _0) , (𝒰 _0))) ↦ (`@a)) -> 4.485164950564397E-4, (`@a :  (`@a : 𝒰 _0 ) ~> ((𝒰 _0) → (`@a))) ↦ (`@a) -> 5.999895267741231E-4, (`@a :  (𝒰 _0) → ((`@b : 𝒰 _0 ) ~> (`@b))) ↦ (`@a) -> 8.571278953916043E-4, (`@a :  𝒰 _0) ↦ ((`@a :  `@a) ↦ (`@a)) -> 0.0022027299892222385, (@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ (`@b)) -> 0.02492541853068003, (`@a :  𝒰 _0) ↦ ((@b :  𝒰 _0) ↦ (`@a)) -> 0.005139703308185224),
//   typDist = ParMap((((((𝒰 _0) → (𝒰 _0)) , (𝒰 _0))) , (𝒰 _0)) -> 2.1525784385253245E-4, ((𝒰 _0) , ((((𝒰 _0) → (𝒰 _0)) , (𝒰 _0)))) -> 1.3593589042741586E-4, (𝒰 _0) → (((((𝒰 _0) , (𝒰 _0))) , (𝒰 _0))) -> 2.3867172083084497E-4, ((((𝒰 _0) , (𝒰 _0))) , (((𝒰 _0) , (𝒰 _0)))) -> 1.1577185082596105E-4, (`@a : 𝒰 _0 ) ~> (((`@a) , (`@a))) -> 4.155810453324019E-4, ((𝒰 _0) , (((𝒰 _0) , (𝒰 _0)))) -> 8.15615342564495E-4, ∑((`@a :  𝒰 _0) ↦ (((𝒰 _0) , (`@a)))) -> 3.495494325276409E-4, (𝒰 _0) → (∑((`@b :  𝒰 _0) ↦ (`@b))) -> 9.696891057756046E-4, (((𝒰 _0) → (𝒰 _0)) , ((`@a : 𝒰 _0 ) ~> (`@a))) -> 1.2728221275453493E-4, ((𝒰 _0) , ((`@b : 𝒰 _0 ) ~> (`@b))) -> 7.841578775409065E-4, ((((((𝒰 _0) , (𝒰 _0))) , (𝒰 _0))) , (𝒰 _0)) -> 1.1340915999277812E-4, 𝒰 _0 -> 0.8333333333333334, (((𝒰 _0) → (𝒰 _0)) , (((𝒰 _0) , (𝒰 _0)))) -> 2.1213702125755823E-4, (((`@a : 𝒰 _0 ) ~> (`@a)) , (𝒰 _0)) -> 0.0012212579048942586, (`@a : 𝒰 _0 ) ~> (((𝒰 _0) , (`@a))) -> 6.787823740429233E-4, ((((𝒰 _0) , (𝒰 _0))) , (𝒰 _0)) -> 0.0013892622099115322, (((𝒰 _0) → ((`@b : 𝒰 _0 ) ~> (`@b))) , (𝒰 _0)) -> 1.5910276594316875E-4, (((𝒰 _0) → (𝒰 _0)) , ((𝒰 _0) → (𝒰 _0))) -> 2.9699182976058146E-4, ((((𝒰 _0) , (𝒰 _0))) , ((𝒰 _0) → (𝒰 _0))) -> 1.6208059115634539E-4, (((𝒰 _0) → (∑((`@b :  𝒰 _0) ↦ (`@b)))) , (𝒰 _0)) -> 1.4385421875512535E-4, ((𝒰 _0) , (𝒰 _0)) -> 0.0300587318408368, ((𝒰 _0) , (((((𝒰 _0) , (𝒰 _0))) , (𝒰 _0)))) -> 1.229076766974827E-4, (((𝒰 _0) → (((𝒰 _0) , (𝒰 _0)))) , (𝒰 _0)) -> 2.3496189063337147E-4, ∑((`@a :  𝒰 _0) ↦ ...
// eqs: ParSet[EquationNode] = <function1>
val mpProof = nextState.termDist.filter(_._1.typ == MP)
// mpProof: ParMap[Term, Double] = ParHashMap((`@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ ((``@a :  `@a) ↦ ((```@a :  (`@a) → (`@b)) ↦ ((```@a) (``@a))))) -> 0.13910794589007958)
println(mpProof)
// ParHashMap((`@a :  𝒰 _0) ↦ ((`@b :  𝒰 _0) ↦ ((``@a :  `@a) ↦ ((```@a :  (`@a) → (`@b)) ↦ ((```@a) (``@a))))) -> 0.13910794589007958)